WARNING: Read the warning messages below!

WARNING: Only tested on Virtex-4 SX35.

WARNING: The code is not very pretty and the comments are gazing at
         each other with binoculars in some parts of the code...

WARNING: NO WARRANTY. If it lets the magic smoke out of your FPGA,
         your Core 2 processor and your car you should not hold me
         responsible...

WARNING: Read through your ISE license carefully, if you have
         downloaded any Xilinx software lately (including service
         packs) you have probably agreed to not open "data files
         generated by the Software", whatever that means.

         Only Xilinx knows what they mean, but it would be very weird
         if they want to stop people from editing XDL files since they
         have previously documented the format and encouraged people
         to use it (See the XDL documentation in ISE 6.3 for example.)
         Even so, read the license and decide for yourself if you
         think you can use this library.


----------------------------------------------------------------------

Author:

Andreas Ehliar <ehliar@isy.liu.se>

If you have any question about this code, feel free to ask me about
it. Still, keep in mind that it is just a proof of concept code, don't
use it in for example a production environment. This is just a hobby
project that I released because I thought other people could be
interested in it. (If enough people seem to be interested in this
project I will probably clean it up a bit though.)

It is also the first Python program I have ever written, so if you are
used to Python you will probably find some odd constructs here and
there.

----------------------------------------------------------------------

License:
See LICENSE (GPL) and logicanalyzer/LICENSE (MIT license)

The PyXDL library itself is published under GPL. All files in the
logicanalyzer directory is published under the MIT license. (So that
you can distribute a design which includes a logic analyzer core
without having to provide any source code.)

----------------------------------------------------------------------


There are three example applications included of varying capability:

----------------------------------------------------------------------

usage.py
--------

View resource utilization of various parts of a design hierarchically:


python usage.py ../exampledesign2/dafk_mikro.xdl 
########################################################################
# Name                        # SLICEL # SLICEM # RAMB16 # IOB # DSP48 #
########################################################################
# /                           #   2812 #     31 #     24 #  11 #     4 #
# /cpu/                       #   2203 #      2 #     12 #   0 #     4 #
# /cpu/or1200_cpu/            #   1776 #      2 #      2 #   0 #     4 #
# /cpu/or1200_cpu/or1200_alu/ #    531 #      0 #      0 #   0 #     0 #
# /uart2/                     #    429 #     22 #      0 #   0 #     0 #
# /uart2/regs/                #    339 #     22 #      0 #   0 #     0 #
# /wb_conbus/                 #     28 #      0 #      0 #   0 #     0 #
# /rom0/                      #     23 #      0 #     12 #   0 #     0 #
# /sys_sig_gen/               #      3 #      0 #      0 #   0 #     0 #
# /pia/                       #      1 #      0 #      0 #   0 #     0 #
########################################################################


You can also specify how many levels to view:
python usage.py ../exampledesign2/dafk_mikro.xdl  4
###################################################################################################
# Name                                                   # SLICEL # SLICEM # RAMB16 # IOB # DSP48 #
###################################################################################################
# /                                                      #   2812 #     31 #     24 #  11 #     4 #
# /cpu/                                                  #   2203 #      2 #     12 #   0 #     4 #
# /cpu/or1200_cpu/                                       #   1776 #      2 #      2 #   0 #     4 #
# /cpu/or1200_cpu/or1200_alu/                            #    531 #      0 #      0 #   0 #     0 #
# /cpu/or1200_cpu/or1200_mult_mac/                       #    264 #      0 #      0 #   0 #     4 #
# /cpu/or1200_cpu/or1200_mult_mac/or1200_gmultp2_32x32/  #     32 #      0 #      0 #   0 #     4 #
# /cpu/or1200_cpu/or1200_sprs/                           #    142 #      0 #      0 #   0 #     0 #
# /cpu/or1200_cpu/or1200_genpc/                          #    107 #      0 #      0 #   0 #     0 #
# /cpu/or1200_cpu/or1200_except/                         #    101 #      0 #      0 #   0 #     0 #
# /cpu/or1200_cpu/or1200_rf/                             #     65 #      0 #      2 #   0 #     0 #
# /cpu/or1200_cpu/or1200_ctrl/                           #     46 #      1 #      0 #   0 #     0 #
# /cpu/or1200_cpu/or1200_ctrl/except_illegal_mux0000_f7/ #      1 #      1 #      0 #   0 #     0 #
# /cpu/or1200_cpu/or1200_lsu/                            #     46 #      0 #      0 #   0 #     0 #
# /cpu/or1200_cpu/or1200_lsu/or1200_mem2reg/             #     31 #      0 #      0 #   0 #     0 #
# /cpu/or1200_cpu/or1200_lsu/or1200_reg2mem/             #      2 #      0 #      0 #   0 #     0 #
# /cpu/or1200_cpu/or1200_if/                             #     34 #      0 #      0 #   0 #     0 #
# /cpu/or1200_cpu/or1200_wbmux/                          #     15 #      0 #      0 #   0 #     0 #
# /cpu/or1200_cpu/or1200_freeze/                         #      5 #      0 #      0 #   0 #     0 #
# /cpu/or1200_cpu/or1200_cfgr/                           #      4 #      0 #      0 #   0 #     0 #
# /cpu/or1200_cpu/or1200_operandmuxes/                   #      4 #      0 #      0 #   0 #     0 #
# /cpu/or1200_tt/                                        #     89 #      0 #      0 #   0 #     0 #
# /cpu/or1200_dc_top/                                    #     78 #      0 #      5 #   0 #     0 #
# /cpu/or1200_dc_top/or1200_dc_fsm/                      #     32 #      0 #      0 #   0 #     0 #
# /cpu/or1200_ic_top/                                    #     49 #      0 #      5 #   0 #     0 #
# /cpu/or1200_ic_top/or1200_ic_fsm/                      #     20 #      0 #      0 #   0 #     0 #
# /cpu/iwb_biu/                                          #     45 #      0 #      0 #   0 #     0 #
# /cpu/or1200_pic/                                       #     21 #      0 #      0 #   0 #     0 #
# /cpu/or1200_immu_top/                                  #      6 #      0 #      0 #   0 #     0 #
# /cpu/dwb_biu/                                          #      3 #      0 #      0 #   0 #     0 #
# /uart2/                                                #    429 #     22 #      0 #   0 #     0 #
# /uart2/regs/                                           #    339 #     22 #      0 #   0 #     0 #
# /uart2/regs/receiver/                                  #    149 #      3 #      0 #   0 #     0 #
# /uart2/regs/receiver/fifo_rx/                          #     83 #      3 #      0 #   0 #     0 #
# /uart2/regs/transmitter/                               #     53 #      8 #      0 #   0 #     0 #
# /uart2/regs/transmitter/fifo_tx/                       #     12 #      0 #      0 #   0 #     0 #
# /uart2/wb_interface/                                   #     33 #      0 #      0 #   0 #     0 #
# /wb_conbus/                                            #     28 #      0 #      0 #   0 #     0 #
# /rom0/                                                 #     23 #      0 #     12 #   0 #     0 #
# /rom0/boot_prog_bram/                                  #      2 #      0 #      8 #   0 #     0 #
# /sys_sig_gen/                                          #      3 #      0 #      0 #   0 #     0 #
# /pia/                                                  #      1 #      0 #      0 #   0 #     0 #
###################################################################################################

----------------------------------------------------------------------


viewer.py
---------

Creates a PNG image of a design. Usage:

python viewer.py design.xdl

The image is saved as test.png

Right now the coloring choices are hardcoded in viewer.py, you will
have to change them to match your design.

WARNING: Will not work correctly on anything but a Virtex-4 SX35 based
design. This should be easy to fix but I don't have any other Virtex-4
based device so I'm not in a hurry to fix it...

----------------------------------------------------------------------

logicgui.py
-----------

Inserts a logic analyzer into an XDL design. Should be simple to use
(in theory). In practice you have to press the buttons in the right
order to avoid crashes/exceptions.

WARNING: Assumes a clock frequency of 100 MHz (which will create a
baud rate of 115200 on the serial port).

WARNING: Not all nets that are listed in the ListCtrl to the left can
be inspected (the nets in a carry chain for example).

Uses wxPython for the GUI part. (But the GUI part is not very well
designed.)

It is possible to script the logicanalyzer inserter, see
or1200_logicanalyzertest.py for an example.



----------------------------------------------------------------------


ONCE AGAIN: keep in mind that this is proof of concept code. Much of
the code should probably be refactored, but I wrote this mainly as a
hobby project, just to see how hard it would be. That said, it did
work for me the last time I tried it out :)


----------------------------------------------------------------------
EOF
